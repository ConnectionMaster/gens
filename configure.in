AC_INIT(configure.in)

AC_PREREQ(2.5)
AC_CONFIG_HEADER(config.h)
AC_CANONICAL_BUILD
AC_CANONICAL_HOST
AC_CANONICAL_TARGET
AC_CONFIG_SRCDIR([configure.in])
AM_INIT_AUTOMAKE(gens, 2.15.4/GS-m4.2+Win32)
AC_PROG_LIBTOOL

AC_PROG_CC
AM_PROG_CC_C_O
AC_ISC_POSIX
AC_HEADER_STDC

# Check operating system.
case $host in
	i?86*mingw32*)
		os=win32;
		AC_DEFINE(GENS_OS_WIN32, 1, Win32 operating system)
		;;
	i?86*)
		os=linux;
		AC_DEFINE(GENS_OS_LINUX, 1, Linux operating system)
		;;
	x86_64*)
		AC_MSG_ERROR([64-bit is currently not supported.]);
		;;
	*)
		AC_MSG_ERROR([Unsupported operating system: $host]);
		;;
esac
AM_CONDITIONAL([GENS_OS_LINUX], [test x$os = xlinux])
AM_CONDITIONAL([GENS_OS_WIN32], [test x$os = xwin32])

# BEGIN: Linux

if test x$os = xlinux; then

# Linux allows UI selection.
# TODO: Re-enable this eventually.
#AC_ARG_ENABLE(ui, AC_HELP_STRING([--enable-ui=[[ui]]], [Enable either the 'gtk' or 'qt4' UI [[default=gtk]]]), ui=$enableval, ui=gtk)
#if test x$ui != xgtk && test x$ui != xqt4; then
#	ui=gtk
#fi
ui=gtk

# Check which UI was selected.

if test x$ui = xgtk; then

# GTK+
GTK_VERSION=2.4.0
AM_PATH_GTK_2_0($GTK_VERSION,
		:,
		AC_MSG_ERROR([*** GTK+ version $GTK_VERSION not found!])
)

AC_DEFINE(GENS_UI_GTK, 1, Enable the GTK+ UI)

# TODO: Disable deprecated GTK+ features.
GTK_CFLAGS="$GTK_CFLAGS -DGTK_DISABLE_DEPRECATED"

#elif test x$ui = xqt4; then
#
# Qt4
#PKG_CHECK_MODULES([Qt4], QtCore >= 4.2.0 QtGui >= 4.2.0)
#AC_DEFINE(GENS_UI_QT4, 1, Enable the Qt4 UI)
#Qt4_moc_location=`pkg-config QtCore --variable=moc_location`
#Qt4_uic_location=`pkg-config QtCore --variable=uic_location`
#AC_SUBST(Qt4_moc_location)
#AC_SUBST(Qt4_uic_location)
#
fi

# SDL

SDL_VERSION=1.1.3
AM_PATH_SDL($SDL_VERSION,
            :,
            AC_MSG_ERROR([*** SDL version $SDL_VERSION not found!])
)

# END: Linux

elif test x$os = xwin32; then

# Win32
AC_DEFINE(GENS_UI_WIN32, 1, Enable the Win32 UI)

fi

AM_CONDITIONAL([GENS_UI_GTK], [test x$ui = xgtk])
#AM_CONDITIONAL([GENS_UI_QT4], [test x$ui = xqt4])
AM_CONDITIONAL([GENS_UI_WIN32], [test x$os = xwin32])

dnl GTK_CFLAGS="$GTK_CFLAGS -DGTK_DISABLE_DEPRECATED"

AC_PATH_PROG(NASM, nasm)
 if test x"$NASM" != xno; then
	NASM_VERSION_FOUND=`$NASM -v | awk '{print $3}'`
dnl	nasm_config_major_version=`echo $NASM_VERSION_FOUND | \
dnl           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\1/'`
dnl    	nasm_config_minor_version=`echo $NASM_VERSION_FOUND | \
dnl           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\2/'`
dnl    	nasm_config_micro_version=`echo $NASM_VERSION_FOUND | \
dnl           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\3/'`

dnl	if [[ $nasm_config_major_version == 0 ]] 
dnl	|| [[ $nasm_config_major_version == 0 && $nasm_config_minor_version -gt 98 ]] 
dnl	|| [[ $nasm_config_major_version == 0 && $nasm_config_minor_version == 98 && $nasm_config_micro_version -ge 38 ]]; then
dnl	echo ;
dnl	else
dnl	 AC_MSG_ERROR([*** nasm version too old : nasm 0.98.38 or superior required !])
dnl	fi
	
 else
	AC_MSG_ERROR([*** nasm not found!])
 fi

AC_ARG_ENABLE(x86_asm, AC_HELP_STRING([--enable-x86-asm], [Enable x86 assembly optimizations [[default=yes]]]), enable_x86_asm=$enableval, enable_x86_asm=yes)
if test x$enable_x86_asm = xyes; then
	AC_DEFINE(GENS_X86_ASM, 1, Enable x86 assembly optimizations)
fi
AM_CONDITIONAL([GENS_X86_ASM], [test x$enable_x86_asm = xyes])

AC_ARG_ENABLE(debugger, AC_HELP_STRING([--enable-debugger], [Enable the built-in debugger [[default=yes]]]), enable_debugger=$enableval, enable_debugger=yes)
if test x$enable_debugger = xyes; then
	AC_DEFINE(GENS_DEBUGGER, 1, Enable the built-in debugger)
fi
AM_CONDITIONAL([GENS_DEBUGGER], [test x$enable_debugger = xyes])

# CD-ROM drive access is currently limited to Linux.
if test x$os = xlinux; then
AC_ARG_ENABLE(cdrom, AC_HELP_STRING([--enable-cdrom], [Enable CD-ROM drive access for SegaCD games [[default=yes]]]), enable_cdrom=$enableval, enable_cdrom=yes)
if test x$enable_cdrom = xyes; then
	AC_DEFINE(GENS_CDROM, 1, Enable CD-ROM drive access for SegaCD games)
fi
AM_CONDITIONAL([GENS_CDROM], [test x$enable_cdrom = xyes])
else
# TODO: Win32 CD-ROM drive access.
AM_CONDITIONAL([GENS_CDROM], [test x$os = xlinux])
fi

AC_ARG_WITH(opengl, AC_HELP_STRING([--without-opengl], [Build without OpenGL support [[default=no]]]), with_opengl=$withval, with_opengl=yes)
if test x$with_opengl = xyes; then
AC_MSG_CHECKING(for OpenGL support)
	with_opengl=no
	AC_TRY_COMPILE([
		#include <GL/gl.h>
	],[
		GLint g;
	],[
		with_opengl=yes
	])      
	AC_MSG_RESULT($with_opengl)
	if test x$with_opengl = xyes; then
		LDFLAGS="$LDFLAGS -lGL"
		AC_DEFINE(GENS_OPENGL, 1, OpenGL support)
	fi
fi
AM_CONDITIONAL([GENS_OPENGL], [test x$with_opengl = xyes])

###
# zlib
###

AC_ARG_WITH(zlib, AC_HELP_STRING([--without-zlib], [Build without zlib support [[default=no]]]), with_zlib=$withval, with_zlib=yes)
AC_ARG_WITH(internal_zlib, AC_HELP_STRING([--with-internal-zlib], [Use internal zlib [[default=no]]]), with_internal_zlib=$withval, with_internal_zlib=no)

# If internal zlib was enabled, but zlib was disabled, enable zlib.
# The user may have thought that the plain zlib option was for shared zlib.
if test x$with_internal_zlib = xyes; then
	with_zlib=yes
fi

if test x$with_zlib = xno; then
	# zlib disabled; disable internal zlib library.
	with_internal_zlib=no
else
	# zlib enabled; check if internal zlib library is eanbled.
if test x$with_internal_zlib = xno; then
AC_MSG_CHECKING(for system zlib)
	with_zlib=no
	AC_TRY_COMPILE([
		#include <zlib.h>
	],[
		gzFile gzfd;
	],[
		with_zlib=yes
	])
	AC_MSG_RESULT($with_zlib)
	if test x$with_zlib = xno; then
		# External zlib not found. Use the internal version.
		with_zlib=yes
		with_internal_zlib=yes
	fi
fi

fi

if test x$with_zlib = xyes; then
AC_DEFINE(GENS_ZLIB, 1, Compression support via zlib)
if test x$with_internal_zlib = xyes; then
AC_DEFINE(GENS_ZLIB_INTERNAL, 1, Use internal zlib instead of system zlib)
fi # GENS_ZLIB_INTERNAL
fi # GENS_ZLIB
AM_CONDITIONAL([GENS_ZLIB], [test x$with_zlib = xyes])
AM_CONDITIONAL([GENS_ZLIB_INTERNAL], [test x$with_internal_zlib = xyes])

###
# libpng
###

AC_ARG_WITH(png, AC_HELP_STRING([--without-libpng], [Build without PNG support [[default=no]]]), with_png=$withval, with_png=yes)
AC_ARG_WITH(internal_png, AC_HELP_STRING([--with-internal-libpng], [Use internal libpng [[default=no]]]), with_internal_png=$withval, with_internal_png=no)

# If internal libpng was enabled, but PNG was disabled, enable PNG.
# The user may have thought that the plain libpng option was for shared libpng.
if test x$with_internal_png = xyes; then
	with_png=yes
fi

if test x$with_png = xno; then
	# libpng disabled; disable internal libpng library.
	with_internal_png=no
else
	# libpng enabled; check if internal libpng library is eanbled.
if test x$with_internal_png = xno; then
AC_MSG_CHECKING(for system libpng)
	with_png=no
	AC_TRY_COMPILE([
		#include <png.h>
	],[
		png_structp png_ptr;
	],[
		with_png=yes
	])
	AC_MSG_RESULT($with_png)
	if test x$with_png = xno; then
		# External libpng not found. Use the internal version.
		with_png=yes
		with_internal_png=yes
	fi
fi

fi

if test x$with_png = xyes; then
AC_DEFINE(GENS_PNG, 1, PNG support via libpng)
if test x$with_internal_png = xyes; then
AC_DEFINE(GENS_PNG_INTERNAL, 1, Use internal libpng instead of system libpng)
fi # GENS_PNG_INTERNAL
fi # GENS_PNG
AM_CONDITIONAL([GENS_PNG], [test x$with_png = xyes])
AM_CONDITIONAL([GENS_PNG_INTERNAL], [test x$with_internal_png = xyes])

###
# Miscellaneous
###

CFLAGS="$CFLAGS -Wall -W"
CXXFLAGS="$CXXFLAGS -Wall -W"
LDFLAGS="$LDFLAGS"

# C99 doesn't work for Win32 for some reason.
if test x$os != xwin32; then
	CFLAGS="$CFLAGS -std=c99"
fi

# Compile as a GUI program on Win32.
if test x$os = xwin32; then
	LDFLAGS="$LDFLAGS -Wl,-subsystem,windows"
fi

# Windows NT target version
if test x$os = xwin32; then
	NT_TARGET="-D_WIN32_WINNT=0x0400"
	CFLAGS="$CFLAGS $NT_TARGET"
	CXXFLAGS="$CXXFLAGS $NT_TARGET"
fi

AC_CHECK_LIB(rt, clock_gettime)
AC_CHECK_LIB(c, getopt)
AC_SUBST(SDL_CFLAGS)
AC_SUBST(SDL_LIBS)
AC_SUBST(GTK_CFLAGS)
AC_SUBST(GTK_LIBS)
AC_SUBST(LIBS)
AC_SUBST(GETTIMEFLAG)

AC_SUBST(CFLAGS)
AC_SUBST(LDFLAGS)

AC_CONFIG_FILES([
Makefile
pixmaps/Makefile
src/Makefile
src/gens/Makefile
src/zlib/Makefile
src/minizip/Makefile
src/libpng/Makefile
src/mp3_dec/Makefile
src/starscream/Makefile
src/starscream/main68k/Makefile
src/starscream/sub68k/Makefile
])

AC_OUTPUT
