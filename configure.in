AC_INIT(configure.in)

AC_PREREQ(2.5)
AC_CONFIG_HEADER(config.h)
AC_CANONICAL_TARGET
AC_CONFIG_SRCDIR([configure.in])
AM_INIT_AUTOMAKE(gens, 2.15.2)
AC_PROG_RANLIB

AC_PROG_CC
AM_PROG_CC_C_O
AC_ISC_POSIX
AC_HEADER_STDC

GTK_VERSION=2.4.0
AM_PATH_GTK_2_0($GTK_VERSION,
		:,
		AC_MSG_ERROR([*** GTK+ version $GTK_VERSION not found!])
)
SDL_VERSION=1.1.3
AM_PATH_SDL($SDL_VERSION,
            :,
            AC_MSG_ERROR([*** SDL version $SDL_VERSION not found!])
)

dnl GTK_CFLAGS="$GTK_CFLAGS -DGTK_DISABLE_DEPRECATED"

AC_PATH_PROG(NASM, nasm)
 if test x"$NASM" != xno; then
	NASM_VERSION_FOUND=`$NASM -v | awk '{print $3}'`
dnl	nasm_config_major_version=`echo $NASM_VERSION_FOUND | \
dnl           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\1/'`
dnl    	nasm_config_minor_version=`echo $NASM_VERSION_FOUND | \
dnl           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\2/'`
dnl    	nasm_config_micro_version=`echo $NASM_VERSION_FOUND | \
dnl           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\3/'`

dnl	if [[ $nasm_config_major_version == 0 ]] 
dnl	|| [[ $nasm_config_major_version == 0 && $nasm_config_minor_version -gt 98 ]] 
dnl	|| [[ $nasm_config_major_version == 0 && $nasm_config_minor_version == 98 && $nasm_config_micro_version -ge 38 ]]; then
dnl	echo ;
dnl	else
dnl	 AC_MSG_ERROR([*** nasm version too old : nasm 0.98.38 or superior required !])
dnl	fi
	
 else
	AC_MSG_ERROR([*** nasm not found!])
 fi
 
AC_ARG_WITH(opengl,[  --without-opengl        Build without OpenGL support ],with_opengl=$withval)
AC_MSG_CHECKING(for OpenGL support)
if test x$with_opengl != xno; then
       with_opengl=no
       AC_TRY_COMPILE([
       #include <GL/gl.h>
       /* Doesnt ac-try-compile ROCK? */
       ],[
       ],[
       with_opengl=yes
       ])      
       AC_MSG_RESULT($with_opengl)
       if test x$with_opengl = xyes; then
               LDFLAGS="$LDFLAGS -lGL"
dnl               CFLAGS="$CFLAGS -D__OPENGL__"
               
       fi
fi

AC_ARG_WITH(png, AC_HELP_STRING([--without-png], [Build without PNG support [[default=no]]]), with_png=$withval, with_png=yes)
if test x$with_png = xyes; then
AC_MSG_CHECKING(for libpng)
	with_png=no
	AC_TRY_COMPILE([
		#include <png.h>
	],[
		png_structp png_ptr
	],[
		with_png=yes
	])      
	AC_MSG_RESULT($with_png)
	if test x$with_png = xyes; then
		LDFLAGS="$LDFLAGS -lpng"
		AC_DEFINE(__GENS_PNG__, 1, PNG support via libpng)
	fi
fi

CFLAGS="$CFLAGS -Wall -W"
LDFLAGS="$LDFLAGS"
AC_CHECK_LIB(rt, clock_gettime)
AC_CHECK_LIB(c, getopt)
AC_SUBST(SDL_CFLAGS)
AC_SUBST(SDL_LIBS)
AC_SUBST(GTK_CFLAGS)
AC_SUBST(GTK_LIBS)
AC_SUBST(LIBS)
AC_SUBST(GETTIMEFLAG)

AC_SUBST(CFLAGS)
AC_SUBST(LDFLAGS)

AC_CONFIG_FILES([
Makefile
pixmaps/Makefile
src/Makefile
src/gens/Makefile
src/mp3_dec/Makefile
src/starscream/Makefile
src/starscream/main68k/Makefile
src/starscream/sub68k/Makefile
])

AC_OUTPUT
