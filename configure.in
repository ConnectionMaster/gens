AC_INIT(configure.in)

AC_PREREQ(2.5)
AC_CONFIG_HEADER(config.h)
AC_CANONICAL_TARGET
AC_CONFIG_SRCDIR([configure.in])
AM_INIT_AUTOMAKE(gens, 2.15.2)
AC_PROG_LIBTOOL

AC_PROG_CC
AM_PROG_CC_C_O
AC_ISC_POSIX
AC_HEADER_STDC

# Check operating system.
case $host in
	*i686*linux*)
		os=linux;
		;;
	*i686*mingw32*)
		os=win32;
		;;
	*)
		AC_MSG_ERROR([Unsupported operating system: $host]);
		;;
esac
AM_CONDITIONAL([LINUX], [test x$os = xlinux])
AM_CONDITIONAL([WIN32], [test x$os = xwin32])

# BEGIN: Linux

if test x$os = xlinux; then

# Linux allows UI selection.
AC_ARG_ENABLE(ui, AC_HELP_STRING([--enable-ui=[[ui]]], [Enable either the 'gtk' or 'qt4' UI [[default=gtk]]]), ui=$enableval, ui=gtk)
if test x$ui != xgtk && test x$ui != xqt4; then
	ui=gtk
fi

# Extra Qt4 stuff
# TODO: Move to a separate include file?
QTDIR=xxx
QTPOSTFIX="-qt4"
QTEXTRAINC="/usr/include/qt4"
QTEXTRALIB="/usr/lib/qt4"

AC_ARG_WITH([qt-dir],
	AC_HELP_STRING([--with-qt-dir=/path/to/Qt-4.x.0], 
		[to specify the path to the Qt-4.x.0 directory.]),
	[QTPATHS="$withval"],
	[QTPATHS="/usr/local/Trolltech/Qt-4.1.0 /c/Qt/4.1.0"])
	
AC_ARG_WITH([qt-postfix],
	AC_HELP_STRING([--with-qt-postfix=[[postfix]]],
		[Specify a postfix for Qt4 binaries]),
	[QTPOSTFIX="-$withval"],
	[QTPOSTFIX=""])

AC_ARG_WITH([qt-include],
	AC_HELP_STRING([--with-qt-include=/path/to/Qt-4.x include],
		[to specify the path to the Qt-4. include directory]),
	[QTEXTRAINC="$withval"],
	[QTEXTRAINC="/usr/include/qt4"])
	
AC_ARG_WITH([qt-lib],
	AC_HELP_STRING([--with-qt-lib=/path/to/Qt-4.x lib],
		[to specify the path to the Qt-4. lib directory]),
	[QTEXTRALIB="$withval"],
	[QTEXTRALIB="$QTDIR/lib"])

for x in $QTPATHS; do
    if test -d $x ; then
       QTDIR="$x"
    fi
done

# Check which UI was selected.

if test x$ui = xgtk; then

# GTK+
GTK_VERSION=2.4.0
AM_PATH_GTK_2_0($GTK_VERSION,
		:,
		AC_MSG_ERROR([*** GTK+ version $GTK_VERSION not found!])
)

AC_DEFINE(GENS_UI_GTK, 1, Enable the GTK+ UI)

# TODO: Disable deprecated GTK+ features.
GTK_CFLAGS="$GTK_CFLAGS -DGTK_DISABLE_DEPRECATED"

elif test x$ui = xqt4; then

# Qt4
# Qt4 check copied from avidemux

AC_MSG_CHECKING(Qt4 directory)
if test $QTDIR = xxx; then
	AC_MSG_ERROR([*** Could not locate Qt 4!])
fi
AC_MSG_RESULT($QTDIR)

AC_MSG_CHECKING(Qt4 libraries)
AC_MSG_RESULT($QTEXTRALIB)

host=`uname -a` # AC_CANONICAL_HOST is broken at the time of this writing.
case $host in
  MINGW32*)
    AC_MSG_NOTICE(MinGW detected.)
    QTLIBS="-L$QTEXTRALIB -lopengl32 -lglu32 -lgdi32 -luser32 -lmingw32 -lqtmain -lQtOpenGL4 -lQtGui4 -lQtCore4 -mthreads -Wl,-enable-stdcall-fixup -Wl,-enable-auto-import -Wl,-enable-runtime-pseudo-reloc -Wl,-subsystem,windows"
    QTINC="-I$QTDIR/include -I$QTDIR/include/QtCore -I$QTDIR/include/QtGui -I$QTDIR/include/QtOpenGL -DUNICODE -DQT_LARGEFILE_SUPPORT -DQT_DLL -DQT_NO_DEBUG -DQT_OPENGL_LIB -DQT_GUI_LIB -DQT_CORE_LIB -DQT_THREAD_SUPPORT -DQT_NEEDS_QMAIN -frtti -fexceptions -I$QTEXTRAINC"
    QTBIN="$QTDIR/bin"
	QTPOSTFIX=""
    ;;
  *)
    AC_MSG_NOTICE(I'm assuming this is Linux)
    AC_PATH_XTRA
    QTLIBS="-Wl,-rpath,$QTEXTRALIB -L$QTEXTRALIB -lQtGui  -lQtCore $X_LIBS -lX11 -lXext -lXmu -lXt -lXi $X_EXTRA_LIBS  -lpthread"
    QTINC="-I$QTEXTRAINC -I$QTEXTRAINC/QtGui -I$QTEXTRAINC/QtCore -I$QTEXTRAINC/QtOpenGL $X_CFLAGS -DQT_OPENGL_LIB -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED -I$QTEXTRAINC"
    QTBIN="$QTDIR/bin"
    ;;
esac

AC_MSG_CHECKING(QT4.x include)
AC_MSG_RESULT($QTINC $QTEXTRAINC)

GENS_QTLIBS="$QTLIBS"
GENS_QTINCLUDES="$QTINC"
GENS_QTCFLAGS="$QTINC"

MOC="$QTBIN/moc$QTPOSTFIX"
UIC="$QTBIN/uic$QTPOSTFIX"
RCC="$QTBIN/rcc"
AC_SUBST(MOC)
AC_SUBST(UIC)
AC_SUBST(RCC)

# Now we check whether we can actually build a Qt app.
cat > myqt.h << EOF
	#include <QObject>

	class Test : public QObject
	{
		Q_OBJECT
		
		public:
			Test() {}
			~Test() {}
			
		public slots:
			void receive() {}
			
		signals:
			void send();
	};
EOF

cat > myqt.cpp << EOF
	#include "myqt.h"
	#include <QApplication>

	int main( int argc, char **argv )
	{
		QApplication app( argc, argv );
		Test t;
		QObject::connect( &t, SIGNAL(send()), &t, SLOT(receive()) );
	}
EOF

AC_MSG_CHECKING(does moc work?)
bnv_try_1="$MOC myqt.h -o moc_myqt.cpp"
AC_TRY_EVAL(bnv_try_1)

if test x"$ac_status" != x0; then
	AC_MSG_ERROR([*** Qt4 check failed: moc doesn't work])
fi

AC_MSG_RESULT(yes)
AC_MSG_CHECKING(can I compile moc_myqt.cpp?)
bnv_try_2="$CXX -c $CXXFLAGS $GENS_QTINCLUDES $GENS_QTCFLAGS -o moc_myqt.o moc_myqt.cpp"
AC_TRY_EVAL(bnv_try_2)

if test x"$ac_status" != x0; then
	AC_MSG_ERROR([*** Qt4 check failed: couldn't compile moc_myqt.cpp])
fi

AC_MSG_RESULT(yes)
AC_MSG_CHECKING(can I compile myqt.cpp?)
bnv_try_3="$CXX $QTINC -c $CXXFLAGS $GENS_QTINCLUDES $GENS_QTCFLAGS -o myqt.o myqt.cpp"
AC_TRY_EVAL(bnv_try_3)

if test x"$ac_status" != x0; then
	AC_MSG_ERROR([*** Qt4 check failed: couldn't compile myqt.cpp])
fi

AC_MSG_RESULT(yes)
AC_MSG_CHECKING(can I link against QT?)
nv_try_4="$CXX $LIBS $GENS_QTLIBS -o myqt myqt.o moc_myqt.o"
AC_TRY_EVAL(bnv_try_4)

if test x"$ac_status" != x0; then
	AC_MSG_ERROR([*** Qt4 check failed: couldn't link])
fi

AC_MSG_RESULT(yes)
AC_MSG_CHECKING(for mkoctfile)
AC_TRY_EVAL(mkoctfile)

if test x"$ac_status" != x0; then
	AC_MSG_ERROR([*** Qt4 check failed: mkoctfile is not in the path])
fi

AC_MSG_RESULT(yes)
rm -f moc_myqt.cpp myqt.h myqt.cpp myqt.o myqt moc_myqt.o

AC_DEFINE(GENS_UI_QT4, 1, Enable the Qt4 UI)

fi

AM_CONDITIONAL([GENS_UI_GTK], [test x$ui = xgtk])
AM_CONDITIONAL([GENS_UI_QT4], [test x$ui = xqt4])

# SDL

SDL_VERSION=1.1.3
AM_PATH_SDL($SDL_VERSION,
            :,
            AC_MSG_ERROR([*** SDL version $SDL_VERSION not found!])
)

fi

# END: Linux

dnl GTK_CFLAGS="$GTK_CFLAGS -DGTK_DISABLE_DEPRECATED"

AC_PATH_PROG(NASM, nasm)
 if test x"$NASM" != xno; then
	NASM_VERSION_FOUND=`$NASM -v | awk '{print $3}'`
dnl	nasm_config_major_version=`echo $NASM_VERSION_FOUND | \
dnl           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\1/'`
dnl    	nasm_config_minor_version=`echo $NASM_VERSION_FOUND | \
dnl           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\2/'`
dnl    	nasm_config_micro_version=`echo $NASM_VERSION_FOUND | \
dnl           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\3/'`

dnl	if [[ $nasm_config_major_version == 0 ]] 
dnl	|| [[ $nasm_config_major_version == 0 && $nasm_config_minor_version -gt 98 ]] 
dnl	|| [[ $nasm_config_major_version == 0 && $nasm_config_minor_version == 98 && $nasm_config_micro_version -ge 38 ]]; then
dnl	echo ;
dnl	else
dnl	 AC_MSG_ERROR([*** nasm version too old : nasm 0.98.38 or superior required !])
dnl	fi
	
 else
	AC_MSG_ERROR([*** nasm not found!])
 fi

AC_ARG_ENABLE(x86_asm, AC_HELP_STRING([--enable-x86-asm], [Enable x86 assembly optimizations [[default=yes]]]), enable_x86_asm=$enableval, enable_x86_asm=yes)
if test x$enable_x86_asm = xyes; then
	AC_DEFINE(GENS_X86_ASM, 1, Enable x86 assembly optimizations)
fi
AM_CONDITIONAL([GENS_X86_ASM], [test x$enable_x86_asm = xyes])

AC_ARG_ENABLE(debugger, AC_HELP_STRING([--enable-debugger], [Enable the built-in debugger [[default=yes]]]), enable_debugger=$enableval, enable_debugger=yes)
if test x$enable_debugger = xyes; then
	AC_DEFINE(GENS_DEBUGGER, 1, Enable the built-in debugger)
fi
AM_CONDITIONAL([GENS_DEBUGGER], [test x$enable_debugger = xyes])

# CD-ROM drive access is currently limited to Linux.
if test x$os = xlinux; then
AC_ARG_ENABLE(cdrom, AC_HELP_STRING([--enable-cdrom], [Enable CD-ROM drive access for SegaCD games [[default=yes]]]), enable_cdrom=$enableval, enable_cdrom=yes)
if test x$enable_cdrom = xyes; then
	AC_DEFINE(GENS_CDROM, 1, Enable CD-ROM drive access for SegaCD games)
fi
AM_CONDITIONAL([GENS_CDROM], [test x$enable_cdrom = xyes])
else
# TODO: Win32 CD-ROM drive access.
AM_CONDITIONAL([GENS_CDROM], [test x$os = xlinux])
fi

AC_ARG_WITH(opengl, AC_HELP_STRING([--without-opengl], [Build without OpenGL support [[default=no]]]), with_opengl=$withval, with_opengl=yes)
if test x$with_opengl = xyes; then
AC_MSG_CHECKING(for OpenGL support)
	with_opengl=no
	AC_TRY_COMPILE([
		#include <GL/gl.h>
	],[
		GLint g;
	],[
		with_opengl=yes
	])      
	AC_MSG_RESULT($with_opengl)
	if test x$with_opengl = xyes; then
		LDFLAGS="$LDFLAGS -lGL"
		AC_DEFINE(GENS_OPENGL, 1, OpenGL support)
	fi
fi
AM_CONDITIONAL([GENS_OPENGL], [test x$with_opengl = xyes])

AC_ARG_WITH(png, AC_HELP_STRING([--without-png], [Build without PNG support [[default=no]]]), with_png=$withval, with_png=yes)
if test x$with_png = xyes; then
AC_MSG_CHECKING(for libpng)
	with_png=no
	AC_TRY_COMPILE([
		#include <png.h>
	],[
		png_structp png_ptr;
	],[
		with_png=yes
	])      
	AC_MSG_RESULT($with_png)
	if test x$with_png = xyes; then
		LDFLAGS="$LDFLAGS -lpng"
		AC_DEFINE(GENS_PNG, 1, PNG support via libpng)
	fi
fi

CFLAGS="$CFLAGS -Wall -W"
LDFLAGS="$LDFLAGS"
AC_CHECK_LIB(rt, clock_gettime)
AC_CHECK_LIB(c, getopt)
AC_SUBST(SDL_CFLAGS)
AC_SUBST(SDL_LIBS)
AC_SUBST(GTK_CFLAGS)
AC_SUBST(GTK_LIBS)
AC_SUBST(LIBS)
AC_SUBST(GETTIMEFLAG)

AC_SUBST(CFLAGS)
AC_SUBST(LDFLAGS)

AC_CONFIG_FILES([
Makefile
pixmaps/Makefile
src/Makefile
src/gens/Makefile
src/minizip/Makefile
src/mp3_dec/Makefile
src/starscream/Makefile
src/starscream/main68k/Makefile
src/starscream/sub68k/Makefile
])

AC_OUTPUT
