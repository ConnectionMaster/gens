AC_INIT(configure.in)

AC_PREREQ(2.5)
AC_CONFIG_HEADER(config.h)
AC_CANONICAL_BUILD
AC_CANONICAL_HOST
AC_CANONICAL_TARGET
AC_CONFIG_SRCDIR([configure.in])
AM_INIT_AUTOMAKE(gens, 2.15.5/GS-m6)
m4_defun([_LT_AC_LANG_F77_CONFIG], [:])

# Libtool
AC_LIBTOOL_DLOPEN
AC_ENABLE_SHARED
AC_DISABLE_STATIC
AC_PROG_LIBTOOL

AC_PROG_CC
AM_PROG_CC_C_O
AC_ISC_POSIX
AC_HEADER_STDC

# Check operating system.
nasm_debug_format=""
case $host in
	i?86*mingw32*)
		os=win32;
		obj_format=win32;
		AC_DEFINE(GENS_OS_WIN32, 1, Win32 operating system)
		;;
	i?86*cygwin*)
		os=win32;
		obj_format=win32;
		AC_DEFINE(GENS_OS_WIN32, 1, Win32 operating system)
		cflags_win32="-mno-cygwin ${cflags_win32}";
		;;
	i?86*darwin*)
		os=macosx;
		obj_format=macho;
		AC_DEFINE(GENS_OS_MACOSX, 1, MacOS X operating system)
		AC_DEFINE(GENS_OS_UNIX, 1, Unix operating system)
		;;
	i?86*linux*)
		os=linux;
		obj_format=elf32;
		AC_DEFINE(GENS_OS_LINUX, 1, Linux operating system)
		AC_DEFINE(GENS_OS_UNIX, 1, Unix operating system)
		nasm_debug_format="-F dwarf";
		;;
	i?86*)
		os=unix;
		obj_format=elf32;
		AC_DEFINE(GENS_OS_UNIX, 1, Unix operating system)
		nasm_debug_format="-F dwarf";
		;;
	x86_64*)
		obj_format=elf64;
		AC_MSG_ERROR([64-bit is currently not supported.]);
		nasm_debug_format="-F dwarf";
		;;
	*)
		AC_MSG_ERROR([Unsupported system architecture: $host]);
		;;
esac

# Operating system
AM_CONDITIONAL([GENS_OS_LINUX],  [test x$os = xlinux])
AM_CONDITIONAL([GENS_OS_MACOSX], [test x$os = xmacosx])
AM_CONDITIONAL([GENS_OS_UNIX],   [test x$os = xlinux -o x$os = xmacosx -o x$os = xunix])
AM_CONDITIONAL([GENS_OS_WIN32],  [test x$os = xwin32])

# Linker format
AM_CONDITIONAL([GENS_OBJ_WIN32], [test x$obj_format = xwin32])
AM_CONDITIONAL([GENS_OBJ_ELF32], [test x$obj_format = xelf32])
AM_CONDITIONAL([GENS_OBJ_ELF64], [test x$obj_format = xelf64])
AM_CONDITIONAL([GENS_OBJ_MACHO], [test x$obj_format = xmacho])

# Debugging symbols
AC_ARG_ENABLE(debug, AC_HELP_STRING([--enable-debug], [Build with debugging symbols [[default=yes]]]), enable_debug=$enableval, enable_debug=yes)
if test x$enable_debug = xyes -o x$enable_debug = xfull; then
	# Debugging symbols enabled.
	nasm_debug_enabled="-g"
	cflags_debug="-g"
else
	# Debugging symbols disabled.
	nasm_debug_enabled=""
	nasm_debug_format=""
	cflags_debug=""
fi

# BEGIN: Unix/Linux (and MacOS X for now)

if test x$os = xunix -o x$os = xlinux -o x$os = xmacosx; then

# Linux allows UI selection.
# TODO: Re-enable this eventually.
#AC_ARG_ENABLE(ui, AC_HELP_STRING([--enable-ui=[[ui]]], [Enable either the 'gtk' or 'qt4' UI [[default=gtk]]]), ui=$enableval, ui=gtk)
#if test x$ui != xgtk && test x$ui != xqt4; then
#	ui=gtk
#fi
ui=gtk

# Check which UI was selected.

if test x$ui = xgtk; then

# GTK+
GTK_VERSION=2.4.0
AM_PATH_GTK_2_0($GTK_VERSION,
		:,
		AC_MSG_ERROR([*** GTK+ version $GTK_VERSION or later not found!])
)

AC_DEFINE(GENS_UI_GTK, 1, Enable the GTK+ UI)

# TODO: Disable deprecated GTK+ features.
GTK_CFLAGS="$GTK_CFLAGS -DGTK_DISABLE_DEPRECATED"

#elif test x$ui = xqt4; then
#
# Qt4
#PKG_CHECK_MODULES([Qt4], QtCore >= 4.2.0 QtGui >= 4.2.0)
#AC_DEFINE(GENS_UI_QT4, 1, Enable the Qt4 UI)
#Qt4_moc_location=`pkg-config QtCore --variable=moc_location`
#Qt4_uic_location=`pkg-config QtCore --variable=uic_location`
#AC_SUBST(Qt4_moc_location)
#AC_SUBST(Qt4_uic_location)
#
fi

# SDL

SDL_VERSION=1.1.3
AM_PATH_SDL($SDL_VERSION,
            :,
            AC_MSG_ERROR([*** SDL version $SDL_VERSION not found!])
)

# END: Unix / Linux (and MacOS X for now)

elif test x$os = xwin32; then

# Win32
AC_DEFINE(GENS_UI_WIN32, 1, Enable the Win32 UI)

fi

AM_CONDITIONAL([GENS_UI_GTK], [test x$ui = xgtk])
#AM_CONDITIONAL([GENS_UI_QT4], [test x$ui = xqt4])
AM_CONDITIONAL([GENS_UI_WIN32], [test x$os = xwin32])

dnl GTK_CFLAGS="$GTK_CFLAGS -DGTK_DISABLE_DEPRECATED"

# Check for nasm.
AC_PATH_PROG(NASM, nasm, no)
if test x"$NASM" != xno; then
	NASM_VERSION_FOUND=`$NASM -v | awk '{print $3}'`
dnl	# TODO: Fix the nasm version check.
dnl	nasm_config_major_version=`echo $NASM_VERSION_FOUND | \
dnl           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\1/'`
dnl    	nasm_config_minor_version=`echo $NASM_VERSION_FOUND | \
dnl           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\2/'`
dnl    	nasm_config_micro_version=`echo $NASM_VERSION_FOUND | \
dnl           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\3/'`

dnl	if [[ $nasm_config_major_version == 0 ]] 
dnl	|| [[ $nasm_config_major_version == 0 && $nasm_config_minor_version -gt 98 ]] 
dnl	|| [[ $nasm_config_major_version == 0 && $nasm_config_minor_version == 98 && $nasm_config_micro_version -ge 38 ]]; then
dnl	echo ;
dnl	else
dnl	 AC_MSG_ERROR([*** nasm version too old : nasm 0.98.38 or superior required !])
dnl	fi

else
	# nasm wasn't found.
	AC_MSG_ERROR([*** nasm not found!])
fi

# Set nasm flags.
if test x$obj_format = xwin32; then
	nasm_obj_format="-f win32 -D __OBJ_WIN32"
elif test x$obj_format = xwin64; then
	AC_MSG_ERROR([*** TODO: Win64 object format.])
elif test x$obj_format = xmacho; then
	nasm_obj_format="-f macho -D __GCC2 -D __OBJ_MACHO"
elif test x$obj_format = xelf32; then
	nasm_obj_format="-f elf -D __GCC2 -D __OBJ_ELF"
elif test x$obj_format = xelf64; then
	AC_MSG_ERROR([*** TODO: ELF64 object format.])
fi

AC_ARG_ENABLE(x86_asm, AC_HELP_STRING([--enable-x86-asm], [Enable x86 assembly optimizations [[default=yes]]]), enable_x86_asm=$enableval, enable_x86_asm=yes)
if test x$enable_x86_asm = xyes; then
	AC_DEFINE(GENS_X86_ASM, 1, Enable x86 assembly optimizations)
fi
AM_CONDITIONAL([GENS_X86_ASM], [test x$enable_x86_asm = xyes])

# nasm optimization level
AC_ARG_ENABLE(nasm_opt, AC_HELP_STRING([--enable-nasm-opt[[=3]]], [Set nasm optimization level [[default=3]]]), enable_nasm_opt=$enableval, enable_nasm_opt=3)
if test x$enable_nasm_opt = xyes; then
	enable_nasm_opt=3
elif test x$enable_nasm_opt = xno; then
	enable_nasm_opt=1;
elif test x$enable_nasm_opt != x0 -a x$enable_nasm_opt != x1 -a x$enable_nasm_opt != x2 -a x$enable_nasm_opt != x3; then
	AC_MSG_WARN([Invalid nasm optimization level: $nasm_opt - defaulting to level 3.])
	enable_nasm_opt=3
fi

NASM="${NASM} -O${enable_nasm_opt} ${nasm_obj_format} ${nasm_debug_enabled} ${nasm_debug_format} -w-orphan-labels"

AC_ARG_ENABLE(debugger, AC_HELP_STRING([--enable-debugger], [Enable the built-in debugger [[default=yes]]]), enable_debugger=$enableval, enable_debugger=yes)
if test x$enable_debugger = xyes; then
	AC_DEFINE(GENS_DEBUGGER, 1, Enable the built-in debugger)
fi
AM_CONDITIONAL([GENS_DEBUGGER], [test x$enable_debugger = xyes])

# Physical CD-ROM drive support. (Linux/Win32 only.)
AC_ARG_ENABLE(cdrom, AC_HELP_STRING([--enable-cdrom], [Enable CD-ROM drive access for SegaCD games [[default=yes]]]), enable_cdrom=$enableval, enable_cdrom=yes)
if test x$enable_cdrom = xyes; then
	if test x$os = xlinux -o x$os = xwin32; then
		AC_DEFINE(GENS_CDROM, 1, Enable CD-ROM drive access for SegaCD games)
	else
		enable_cdrom=no
		AC_MSG_WARN([Physical CD-ROM drive support is currently only available on Linux and Windows. Disabling.])
	fi
fi
AM_CONDITIONAL([GENS_CDROM], [test x$enable_cdrom = xyes])

# SegaCD MP3 support is currently not usable on Windows.
AC_ARG_ENABLE(mp3, AC_HELP_STRING([--enable-mp3], [Enable MP3 support for SegaCD games [[default=yes]]]), enable_mp3=$enableval, enable_mp3=yes)
if test x$enable_mp3 = xyes; then
	if test x$os = xwin32; then
		# MP3 support is currently disabled on Windows due to problems.
		AC_MSG_WARN([MP3 support is currently broken on Windows. Disabling.]);
		enable_mp3=no
	else
		AC_DEFINE(GENS_MP3, 1, Enable MP3 support for SegaCD games)
	fi
fi
AM_CONDITIONAL([GENS_MP3], [test x$enable_mp3 = xyes])

AC_ARG_ENABLE(win32_console, AC_HELP_STRING([--enable-win32-console], [Enable console output on Windows [[default=no]]]), enable_win32_console=$enableval, enable_win32_console=no)
if test x$os = xwin32; then
	if test x$enable_win32_console = xyes; then
		# Enable console output on Win32.
		AC_DEFINE(GENS_WIN32_CONSOLE, 1, Enable console output on Windows)
	fi
else
	# Not Windows - ignore this option.
	if test x$enable_win32_console = xyes; then
		# No, you can't enable a Windows console if you're not building for Windows.
		# Not yours.
		AC_MSG_WARN([Not building for Windows; ignoring --enable-win32-console])
		enable_win32_console=no
	fi
fi
AM_CONDITIONAL([GENS_WIN32_CONSOLE], [test x$enable_win32_console = xyes])

AC_ARG_WITH(opengl, AC_HELP_STRING([--without-opengl], [Build without OpenGL support [[default=no]]]), with_opengl=$withval, with_opengl=yes)
if test x$with_opengl = xyes; then
AC_MSG_CHECKING(for OpenGL support)
	with_opengl=no
	AC_TRY_COMPILE([
		#include <GL/gl.h>
	],[
		GLint g;
	],[
		with_opengl=yes
	])      
	AC_MSG_RESULT($with_opengl)
	if test x$with_opengl = xyes; then
		LDFLAGS="$LDFLAGS -lGL"
		AC_DEFINE(GENS_OPENGL, 1, OpenGL support)
	fi
fi
AM_CONDITIONAL([GENS_OPENGL], [test x$with_opengl = xyes])

###
# zlib
###

AC_ARG_WITH(zlib, AC_HELP_STRING([--without-zlib], [Build without zlib support [[default=no]]]), with_zlib=$withval, with_zlib=yes)
AC_ARG_WITH(internal_zlib, AC_HELP_STRING([--with-internal-zlib], [Use internal zlib [[default=no]]]), with_internal_zlib=$withval, with_internal_zlib=no)

# If internal zlib was enabled, but zlib was disabled, enable zlib.
# The user may have thought that the plain zlib option was for shared zlib.
if test x$with_internal_zlib = xyes; then
	with_zlib=yes
fi

if test x$with_zlib = xno; then
	# zlib disabled; disable internal zlib library.
	with_internal_zlib=no
else
	# zlib enabled; check if internal zlib library is eanbled.
if test x$with_internal_zlib = xno; then
AC_MSG_CHECKING(for system zlib)
	with_zlib=no
	AC_TRY_COMPILE([
		#include <zlib.h>
	],[
		gzFile gzfd;
	],[
		with_zlib=yes
	])
	AC_MSG_RESULT($with_zlib)
	if test x$with_zlib = xno; then
		# External zlib not found. Use the internal version.
		with_zlib=yes
		with_internal_zlib=yes
	fi
fi

fi

if test x$with_zlib = xyes; then
AC_DEFINE(GENS_ZLIB, 1, Compression support via zlib)
if test x$with_internal_zlib = xyes; then
AC_DEFINE(GENS_ZLIB_INTERNAL, 1, Use internal zlib instead of system zlib)
fi # GENS_ZLIB_INTERNAL
fi # GENS_ZLIB
AM_CONDITIONAL([GENS_ZLIB], [test x$with_zlib = xyes])
AM_CONDITIONAL([GENS_ZLIB_INTERNAL], [test x$with_internal_zlib = xyes])

###
# libpng
###

AC_ARG_WITH(png, AC_HELP_STRING([--without-png], [Build without PNG support [[default=no]]]), with_png=$withval, with_png=yes)
AC_ARG_WITH(internal_png, AC_HELP_STRING([--with-internal-png], [Use internal libpng [[default=no]]]), with_internal_png=$withval, with_internal_png=no)

# If internal libpng was enabled, but PNG was disabled, enable PNG.
# The user may have thought that the plain libpng option was for shared libpng.
if test x$with_internal_png = xyes; then
	with_png=yes
fi

if test x$with_png = xno; then
	# libpng disabled; disable internal libpng library.
	with_internal_png=no
else
	# libpng enabled; check if internal libpng library is eanbled.
if test x$with_internal_png = xno; then
AC_MSG_CHECKING(for system libpng)
	with_png=no
	AC_TRY_COMPILE([
		#include <png.h>
	],[
		png_structp png_ptr;
	],[
		with_png=yes
	])
	AC_MSG_RESULT($with_png)
	if test x$with_png = xno; then
		# External libpng not found. Use the internal version.
		with_png=yes
		with_internal_png=yes
	fi
fi

fi

if test x$with_png = xyes; then
AC_DEFINE(GENS_PNG, 1, PNG support via libpng)
if test x$with_internal_png = xyes; then
AC_DEFINE(GENS_PNG_INTERNAL, 1, Use internal libpng instead of system libpng)
fi # GENS_PNG_INTERNAL
fi # GENS_PNG
AM_CONDITIONAL([GENS_PNG], [test x$with_png = xyes])
AM_CONDITIONAL([GENS_PNG_INTERNAL], [test x$with_internal_png = xyes])

###
# C++ map type
###

AC_MSG_CHECKING(for hash table type)

# These tests use C++.
AC_LANG(C++)

# Check if the TR1 unordered map works. (gcc-4.x and later)
AC_COMPILE_IFELSE(
	AC_LANG_PROGRAM(
		[[#include <tr1/unordered_map>]],
		[[std::tr1::unordered_map<int, int>::iterator testIterator;]]),
	[hashtable=tr1_unordered_map],
	[hashtable=no]
	)

if test x$hashtable = xno; then
	# Check if the gcc hash map works. (gcc-3.x and earlier)
	AC_COMPILE_IFELSE(
		AC_LANG_PROGRAM(
			[[#include <ext/hash_map>]],
			[[__gnu_cxx::hash_map<int, int>::iterator testIterator;]]),
		[hashtable=gnu_hash_map],
		[hashtable=no]
		)
	
	if test x$hashtable = xno; then
		# Check if the standard C++ map works.
		AC_COMPILE_IFELSE(
			AC_LANG_PROGRAM(
				[[#include <map>]],
				[[std::map<int, int>::iterator testIterator;]]),
			[hashtable=std_map],
			[hashtable=no]
			)
		
		if test x$hashtable = xno; then
			AC_MSG_ERROR(Could not find a usable hash table implementation.)
		fi
	fi
fi

if test x$hashtable = xtr1_unordered_map; then
	AC_MSG_RESULT(TR1 unordered_map)
	AC_DEFINE(GENS_HASHTABLE_TR1_UNORDERED_MAP, 1, Use the TR1 unordered_map class.)
elif test x$hashtable = xgnu_hash_map; then
	AC_MSG_RESULT(GNU hash_map)
	AC_DEFINE(GENS_HASHTABLE_GNU_HASH_MAP, 1, Use the GNU hash_map class.)
elif test x$hashtable = xstd_map; then
	AC_MSG_RESULT(Standard C++ map)
	AC_MSG_WARN(SLOW std::map is being used; consider upgrading your compiler.)
	AC_DEFINE(GENS_HASHTABLE_STD_MAP, 1, Use the standard C++ std::map class. (SLOW))
fi

# Reset test language to C.
AC_LANG(C)

###
# Miscellaneous
###

# C99 doesn't work on the Win32 build for some reason.
if test x$os != xwin32; then
	cflags_99="-std=c99"
else
	cflags_99=""
fi

# Check if the linker supports --as-needed.
AC_MSG_CHECKING(if the linker supports --as-needed)
as_needed=`$LD --help 2>&1 | grep as-needed`
if test "x$as_needed" != "x"; then
	# --as-needed is supported.
	AC_MSG_RESULT(yes)
	ldflags_as_needed="-Wl,--as-needed"
else
	# --as-needed is not supported.
	AC_MSG_RESULT(no)
	ldflags_as_needed=""
fi

# Windows-specific options.
if test x$os = xwin32; then
	# Check if the Windows console should be enabled.
	if test x$enable_win32_console = xyes; then
		# Enable the Windows console.
		ldflags_win32="$LDFLAGS -Wl,-subsystem,console"
	else
		# Disable the Windows console.
		ldflags_win32="$LDFLAGS -Wl,-subsystem,windows"
	fi
	
	# Windows NT target version
	cflags_win32="${cflags_win32} -D_WIN32_WINNT=0x0400"
else
	# Not Win32.
	ldflags_win32=""
	cflags_win32=""
fi

CFLAGS="-O2 -Wall -Wextra ${cflags_debug} ${cflags_99} ${cflags_win32} $CFLAGS"
CXXFLAGS="-O2 -Wall -Wextra ${cflags_debug} ${cflags_win32} $CXXFLAGS"
LDFLAGS="${ldflags_as_needed} ${ldflags_win32} $LDFLAGS"

# Make sure all packages have the base source directory in their #include search path.
CPPFLAGS="-I$srcdir/src $CPPFLAGS"

# Use package-specific libdir.
libdir="$libdir/gens"

AC_CHECK_LIB(rt, clock_gettime)
AC_CHECK_LIB(c, getopt)
AC_SUBST(SDL_CFLAGS)
AC_SUBST(SDL_LIBS)
AC_SUBST(GTK_CFLAGS)
AC_SUBST(GTK_LIBS)
AC_SUBST(LIBS)
AC_SUBST(GETTIMEFLAG)

AC_SUBST(CFLAGS)
AC_SUBST(LDFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(libdir)

AC_CONFIG_FILES([
Makefile
pixmaps/Makefile
xdg/Makefile
src/Makefile
src/zlib/Makefile
src/minizip/Makefile
src/libpng/Makefile
src/mp3_dec/Makefile
src/starscream/Makefile
src/starscream/main68k/Makefile
src/starscream/sub68k/Makefile
src/mdZ80/Makefile
src/mdp/Makefile
src/mdp/render/Makefile
src/mdp/render/normal/Makefile
src/mdp/render/double/Makefile
src/mdp/render/scanline/Makefile
src/mdp/render/scanline_25/Makefile
src/mdp/render/scanline_50/Makefile
src/mdp/render/interpolated/Makefile
src/mdp/render/interpolated_scanline/Makefile
src/mdp/render/interpolated_scanline_25/Makefile
src/mdp/render/interpolated_scanline_50/Makefile
src/mdp/render/scale2x/Makefile
src/mdp/render/hq2x/Makefile
src/mdp/render/2xsai/Makefile
src/gens/Makefile
])

AC_OUTPUT
